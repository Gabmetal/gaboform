# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: MainVG-Variables
- group: MainVG-SensitiveVariables
- group: InitialClusterConfiguration

stages:
- stage: Validate
  jobs:
  - job: tfValidate
    pool:
      vmImage: windows-latest
    steps:
    - task: AzureCLI@2
      displayName: 'AZ CLI - Storage Account Deployment (TF.state)'
      inputs:
        azureSubscription: 'Patrocinio de Microsoft Azure (63e68764-6c1e-4010-a6bf-0c967f06188c)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          ## Creating $(rgname)
          az group create -l $(location) --name $(sarg)
          az storage account create --name $(saname) -g $(sarg) -l $(location) --sku "Standard_LRS" 
          az storage container create -n $(contname) --account-name $(saname)
          #az storage account keys -g $(sarg) -n $(saname)

    - task: AzureCLI@2
      displayName: 'AZ CLI - Getting SA Keys | Applying Recursive A.DevOps Variables.'
      inputs:
        azureSubscription: 'Patrocinio de Microsoft Azure (63e68764-6c1e-4010-a6bf-0c967f06188c)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          key=$(az storage account keys list --account-name $(saname) --query [0].value -o json)
          echo "##vso[task.setvariable variable=sakey]$key"

    - task: replacetokens@3
      inputs:
        rootDirectory: 'AKS_IaC'
        targetFiles: 'terraform.tfvars'
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '$('
        tokenSuffix: ')'
        useLegacyPattern: false
        enableTransforms: false
        enableTelemetry: true

    - task: replacetokens@3
      inputs:
        rootDirectory: 'AKS_IaC'
        targetFiles: '**/provider.tf'
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        useLegacyPattern: false
        enableTransforms: false
        enableTelemetry: true

    - task: Terraform@2
      inputs:
        TemplatePath: 'AKS_IaC'
        Arguments: 'init'
        InstallTerraform: true
        UseAzureSub: false
    - task: Terraform@2
      inputs:
        TemplatePath: 'AKS_IaC'
        Arguments: 'validate'
        InstallTerraform: true
        UseAzureSub: false

- stage: Publish
  jobs:
  - job: PublishArtifact
    pool:
      vmImage: windows-latest
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: 'AKS_IaC'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: TerraformFilesDrop
      inputs:
        ArtifactName: TerraformFiles
        PathtoPublish: $(Build.ArtifactStagingDirectory)